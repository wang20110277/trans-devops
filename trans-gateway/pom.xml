<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>trans-devops</artifactId>
        <groupId>com.trans</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>trans-gateway</artifactId>

    <dependencies>
        <!--gateway网关-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <!--skywalking-->
        <dependency>
            <groupId>org.apache.skywalking</groupId>
            <artifactId>apm-toolkit-logback-1.x</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.skywalking</groupId>
            <artifactId>apm-toolkit-trace</artifactId>
        </dependency>
        <!--trans-base -->
        <dependency>
            <groupId>com.trans</groupId>
            <artifactId>trans-base</artifactId>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <!--使用docker-maven-plugin插件-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>

                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--将插件绑定在package这个phase上。也就是说，
                        用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <!--<execution>-->
                    <!--<id>tag-image</id>-->
                    <!--<phase>package</phase>-->
                    <!--<goals>-->
                    <!--<goal>tag</goal>-->
                    <!--</goals>-->
                    <!--<configuration>-->
                    <!--<image>trans:${project.version}</image>-->
                    <!--<newName>http://192.168.10.30:5566/trans:${project.version}</newName>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                    <execution>
                        <id>push-image</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>http://192.168.10.30:5566/trans:${project.version}</imageName>
                        </configuration>
                    </execution>
                </executions>

                <configuration>
                    <!-- 指定每次构建覆盖上次的标签 -->
                    <forceTags>true</forceTags>
                    <!--指定生成的镜像名,这里是我们的项目名-->
                    <imageName>${project.artifactId}</imageName>
                    <!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                        <!--<imageTag>${project.version}</imageTag>-->
                    </imageTags>
                    <!-- 指定我们项目中Dockerfile文件的路径-->
                    <dockerDirectory>${project.basedir}</dockerDirectory>

                    <!--指定远程docker 地址-->
                    <dockerHost>http://127.0.0.1:2375</dockerHost>
                    <!--<dockerHost>http://192.168.10.30:2375</dockerHost>-->

                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--jar包所在的路径  此处配置的即对应项目中target目录-->
                            <directory>${project.build.directory}</directory>
                            <!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <serverId>Harbor</serverId>
                    <registryUrl>http://192.168.10.30:5566</registryUrl>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>